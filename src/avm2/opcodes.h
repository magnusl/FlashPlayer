#ifndef _OPCODES_H_
#define _OPCODES_H_

/**
 * \file    opcodes.h
 * \brief   Defines the AVM2 bytecode opcodes.
 * \author  Magnus Leksell
 */

#include <stdint.h>

namespace avm2 {

typedef enum {
    eAVM2_nop               = 0x02,
    eAVM2_throw             = 0x03,
    eAVM2_getsuper          = 0x04,
    eAVM2_setsuper          = 0x05,
    eAVM2_dxns              = 0x06,
    eAVM2_dxnslate          = 0x07,
    eAVM2_kill              = 0x08,
    eAVM2_label             = 0x09,
    eAVM2_jump              = 0x10,
    eAVM2_ifnlt             = 0x0c,
    eAVM2_ifnle             = 0x0d,
    eAVM2_ifngt             = 0x0e,
    eAVM2_ifnge             = 0x0f,
    eAVM2_iftrue            = 0x11,
    eAVM2_iffalse           = 0x12,
    eAVM2_ifeq              = 0x13,
    eAVM2_ifne              = 0x14,
    eAVM2_iflt              = 0x15, 
    eAVM2_ifle              = 0x16,
    eAVM2_ifgt              = 0x17,
    eAVM2_ifge              = 0x18,
    eAVM2_ifstricteq        = 0x19,
    eAVM2_ifstrictne        = 0x1a,
    eAVM2_loopkupswitch     = 0x1b, /** Not implemented yet */
    eAVM2_popscope          = 0x1d,
    eAVM2_nextname          = 0x1e,
    eAVM2_hasnext           = 0x1f,
    eAVM2_pushwith          = 0x1c,
    eAVM2_pushnull          = 0x20,
    eAVM2_pushundefined     = 0x21,
    eAVM2_nextvalue         = 0x23,
    eAVM2_pushbyte          = 0x24,
    eAVM2_pushshort         = 0x25,
    eAVM2_pushtrue          = 0x26,
    eAVM2_pushfalse         = 0x27,
    eAVM2_pushnan           = 0x28,
    eAVM2_pop               = 0x29,
    eAVM2_dup               = 0x2a,
    eAVM2_pushdouble        = 0x2f,
    eAVM2_swap              = 0x2b,
    eAVM2_pushstring        = 0x2c,
    eAVM2_pushint           = 0x2d,
    eAVM2_pushuint          = 0x2e,
    eAVM2_pushscope         = 0x30,
    eAVM2_pushnamespace     = 0x31,
    eAVM2_hasnext2          = 0x32,
    eAVM2_newfunction       = 0x40,
    eAVM2_call              = 0x41,
    eAVM2_construct         = 0x42,
    eAVM2_callmethod        = 0x43,
    eAVM2_callstatic        = 0x44, 
    eAVM2_callsuper         = 0x45, 
    eAVM2_callproperty      = 0x46,
    eAVM2_returnvoid        = 0x47,
    eAVM2_returnvalue       = 0x48,
    eAVM2_constructsuper    = 0x49,
    eAVM2_constructprop     = 0x4a,
    eAVM2_callproplex       = 0x4c,
    eAVM2_callsupervoid     = 0x4e,
    eAVM2_callpropvoid      = 0x4f,
    eAVM2_newobject         = 0x55,
    eAVM2_newarray          = 0x56,
    eAVM2_newactivation     = 0x57,
    eAVM2_newclass          = 0x58,
    eAVM2_getdescendants    = 0x59,
    eAVM2_newcatch          = 0x5a, 
    eAVM2_findpropery       = 0x5e,
    eAVM2_findpropstrict    = 0x5d,
    eAVM2_getlex            = 0x60,
    eAVM2_setproperty       = 0x61,
    eAVM2_getlocal          = 0x62,
    eAVM2_setlocal          = 0x63,
    eAVM2_getglobalscope    = 0x64,
    eAVM2_getscopeobject    = 0x65,
    eAVM2_getproperty       = 0x66,
    eAVM2_initproperty      = 0x68,
    eAVM2_deleteproperty    = 0x6a,
    eAVM2_getslot           = 0x6c,
    eAVM2_setslot           = 0x6d,
    eAVM2_getglobalslot     = 0x6e,
    eAVM2_setglobalslot     = 0x6f,
    eAVM2_convert_s         = 0x70,
    eAVM2_esc_xelem         = 0x71,
    eAVM2_esc_xattr         = 0x72,
    eAVM2_convert_i         = 0x73,
    eAVM2_convert_u         = 0x74,
    eAVM2_convert_d         = 0x75,
    eAVM2_convert_b         = 0x76,
    eAVM2_convert_o         = 0x77,
    eAVM2_checkfilter       = 0x78,
    eAVM2_coerce            = 0x80,
    eAVM2_coerce_a          = 0x82,
    eAVM2_coerce_s          = 0x85,
    eAVM2_astype            = 0x86,
    eAVM2_astypelate        = 0x87,
    eAVM2_negate            = 0x90,
    eAVM2_increment         = 0x91,
    eAVM2_inclocal          = 0x92,
    eAVM2_decrement         = 0x93,
    eAVM2_declocal          = 0x94,
    eAVM2_typeof            = 0x95,
    eAVM2_not               = 0x96,
    eAVM2_bitnot            = 0x97,
    eAVM2_add               = 0xa0,
    eAVM2_subtract          = 0xa1,
    eAVM2_multiply          = 0xa2,
    eAVM2_divide            = 0xa3,
    eAVM2_modulo            = 0xa4,
    eAVM2_lshift            = 0xa5,
    eAVM2_rshift            = 0xa6,
    eAVM2_urshift           = 0xa7,
    eAVM2_bitand            = 0xa8,
    eAVM2_bitor             = 0xa9,
    eAVM2_bitxor            = 0xaa,
    eAVM2_equals            = 0xab,
    eAVM2_strictequals      = 0xac,
    eAVM2_lessthan          = 0xad,
    eAVM2_lessequals        = 0xae,
    eAVM2_greaterthan       = 0xaf,
    /** greaterthan = 0xaf ? */
    eAVM2_greaterequals     = 0xb0,
    eAVM2_instanceof        = 0xb1,
    eAVM2_istype            = 0xb2,
    eAVM2_istypelate        = 0xb3,
    eAVM2_in                = 0xb4,
    eAVM2_increment_i       = 0xc0,
    eAVM2_decrement_i       = 0xc1,
    eAVM2_inclocal_i        = 0xc2,
    eAVM2_declocal_i        = 0xc3,
    eAVM2_negate_i          = 0xc4,
    eAVM2_add_i             = 0xc5,
    eAVM2_subtract_i        = 0xc6,
    eAVM2_multiply_i        = 0xc7,
    eAVM2_getlocal_0        = 0xd0,
    eAVM2_getlocal_1        = 0xd1,
    eAVM2_getlocal_2        = 0xd2,
    eAVM2_getlocal_3        = 0xd3,
    eAVM2_setlocal_0        = 0xd4,
    eAVM2_setlocal_1        = 0xd5,
    eAVM2_setlocal_2        = 0xd6,
    eAVM2_setlocal_3        = 0xd7,
    eAVM2_debug             = 0xef,
    eAVM2_debugline         = 0xf0,
    eAVM2_debugfile         = 0xf1,
} Opcode_t;

} // namespace avm2

#endif